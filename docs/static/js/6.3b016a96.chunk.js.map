{"version":3,"sources":["apps/Circles/Circles.module.scss","apps/Circles/Circles.utils.ts","apps/Circles/Circles.tsx"],"names":["module","exports","getDaysInMonth","month","year","isLeapYear","getDateSize","day","getMinuteSize","minute","getDayOfYear","date","output","m","CIRCLES","getCircleSizes","getDay","getDate","getMonth","getFullYear","hour","getHours","getMinutes","second","getSeconds","dayOfYear","fullHour","getClockSizes","Date","Circles","useState","circleSizes","setCircleSizes","useEffect","intervalId","setInterval","clearInterval","getDoy","useCallback","circle","doy","undefined","getHour","className","styles","circles","map","circles_circleContainer","circles_circle","data-doy","data-h","style","size","width","height"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,wBAA0B,yCAAyC,eAAiB,kC,0ECiBnIC,EAAiB,SAACC,EAAeC,GACnC,OAAOD,GACH,KAAK,EAAG,OAJG,SAACC,GAAD,OAA2BA,EAAO,IAAM,IAAMA,EAAO,MAAQ,GAAKA,EAAO,MAAS,GAI9EC,CAAWD,GAAQ,GAAK,GACvC,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAI,OAAO,GAChB,QAAS,OAAO,KAIlBE,EAAc,SAACC,EAAaJ,EAAeC,GAA7B,OAAsDG,EAAML,EAAeC,EAAOC,IAGhGI,EAAgB,SAACC,GAAD,OAA4BA,EAAS,IAE9CC,EAAe,SAACC,EAAcR,EAAeC,GAEtD,IADA,IAAIQ,EAASD,EACLE,EAAI,EAAGA,EAAIV,EAAOU,GAAK,EAC3BD,GAAUV,EAAeW,EAAGT,GAEhC,OAAOQ,GAmBEE,EAA0C,CACnD,MACA,OACA,QACA,OACA,SACA,U,OCtDEC,EAAiB,kBDgCM,SAACJ,GAAD,MAA4B,CACrDJ,KAfgBA,EAeAI,EAAKK,WAfsBT,EAAM,GAAK,EAAK,GAAK,GAgBhEI,KAAML,EAAYK,EAAKM,UAAWN,EAAKO,WAAYP,EAAKQ,eACxDhB,OAfkBA,EAeEQ,EAAKO,YAfoBf,EAAQ,GAAK,IAgB1DiB,MAfiBA,EAeCT,EAAKU,WAfmBD,EAAO,IAgBjDX,OAAQD,EAAcG,EAAKW,cAC3BC,OAAQf,EAAcG,EAAKa,cAC3BC,UAAWf,EAAaC,EAAKM,UAAWN,EAAKO,WAAYP,EAAKQ,eAC9DO,SAAUf,EAAKU,YAnBC,IAACD,EADCjB,EAFFI,EClBSoB,CAAc,IAAIC,OAkDhCC,UAhDoB,WAAO,IAAD,EACDC,mBAAoBf,KADnB,mBAChCgB,EADgC,KACnBC,EADmB,KAGvCC,qBAAU,WACR,IAAMC,EAAaC,aAAY,WAC7BH,EAAejB,OACd,KACH,OAAO,WACLqB,cAAcF,MAEf,IAEH,IAAMG,EAASC,uBACb,SAACC,EAAiCC,GAChC,MAAkB,SAAXD,GAAgC,QAAXA,GAA+B,UAAXA,EAC5CC,OACAC,IAEN,IAGIC,EAAUJ,uBACd,SAACC,EAAiCnB,GAChC,MAAkB,SAAXmB,GAAgC,WAAXA,GAAkC,WAAXA,EAC/CnB,OACAqB,IAEN,IAGF,OACE,qBAAKE,UAAWC,IAAOC,QAAvB,SACG/B,EAAQgC,KAAI,SAACP,GAAD,OACX,qBAAKI,UAAWC,IAAOG,wBAAvB,SACE,qBACEJ,UAAWC,IAAOI,eAClBC,WAAUZ,EAAOE,EAAQR,EAAYN,WACrCyB,SAAQR,EAAQH,EAAQR,EAAYL,UACpCyB,ODGqBC,ECHGrB,EAAYQ,GDGkB,CAC9Dc,MAAM,GAAD,OAAY,IAAPD,EAAL,KACLE,OAAO,GAAD,OAAY,IAAPF,EAAL,OCTA,mBADmDb,GDQ7B,IAACa","file":"static/js/6.3b016a96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circles\":\"Circles_circles__vF7EH\",\"circles_circleContainer\":\"Circles_circles_circleContainer__35l9Y\",\"circles_circle\":\"Circles_circles_circle__2ozCW\"};","import { CSSProperties } from \"react\";\n\nexport interface ClockRelativeSize {\n    day: number;\n    date: number;\n    month: number;\n    hour: number;\n    minute: number;\n    second: number;\n}\n\nexport interface ClockData extends ClockRelativeSize {\n    dayOfYear: number;\n    fullHour: number;\n}\n\nconst isLeapYear = (year: number): boolean => year % 4 === 0 && (year % 100 !== 0 || year % 4000 === 0);\n\nconst getDaysInMonth = (month: number, year: number): number => {\n    switch(month) {\n        case 1: return isLeapYear(year) ? 29 : 28;\n        case 3:\n        case 5:\n        case 8:\n        case 10: return 30;\n        default: return 31;\n    }\n};\nconst getDaySize = (day: number): number => (((day + 6) % 7) + 1) / 7;\nconst getDateSize = (day: number, month: number, year: number): number => day / getDaysInMonth(month, year);\nconst getMonthSize = (month: number): number => (month + 1) / 12;\nconst getHourSize = (hour: number): number => hour / 24;\nconst getMinuteSize = (minute: number): number => minute / 60;\n\nexport const getDayOfYear = (date: number, month: number, year: number): number => {\n    let output = date;\n    for(let m = 0; m < month; m += 1) {\n        output += getDaysInMonth(m, year);\n    }\n    return output;\n};\n\nexport const getClockSizes = (date: Date): ClockData => ({\n    day: getDaySize(date.getDay()),\n    date: getDateSize(date.getDate(), date.getMonth(), date.getFullYear()),\n    month: getMonthSize(date.getMonth()),\n    hour: getHourSize(date.getHours()),\n    minute: getMinuteSize(date.getMinutes()),\n    second: getMinuteSize(date.getSeconds()),\n    dayOfYear: getDayOfYear(date.getDate(), date.getMonth(), date.getFullYear()),\n    fullHour: date.getHours(),\n});\n\nexport const getGetCircleSize = (size: number): CSSProperties => ({\n    width: `${size * 100}%`,\n    height: `${size * 100}%`,\n});\n\nexport const CIRCLES: Array<keyof ClockRelativeSize> = [\n    \"day\",\n    \"date\",\n    \"month\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n  ];\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport styles from \"./Circles.module.scss\";\nimport {\n  CIRCLES,\n  ClockData,\n  ClockRelativeSize,\n  getClockSizes,\n  getGetCircleSize,\n} from \"./Circles.utils\";\n\nconst getCircleSizes = () => getClockSizes(new Date());\n\nconst Circles: FunctionComponent = () => {\n  const [circleSizes, setCircleSizes] = useState<ClockData>(getCircleSizes());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCircleSizes(getCircleSizes());\n    }, 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const getDoy = useCallback(\n    (circle: keyof ClockRelativeSize, doy: number): number | undefined => {\n      return circle === \"date\" || circle === \"day\" || circle === \"month\"\n        ? doy\n        : undefined;\n    },\n    []\n  );\n\n  const getHour = useCallback(\n    (circle: keyof ClockRelativeSize, hour: number): number | undefined => {\n      return circle === \"hour\" || circle === \"minute\" || circle === \"second\"\n        ? hour\n        : undefined;\n    },\n    []\n  );\n\n  return (\n    <div className={styles.circles}>\n      {CIRCLES.map((circle) => (\n        <div className={styles.circles_circleContainer} key={circle}>\n          <div\n            className={styles.circles_circle}\n            data-doy={getDoy(circle, circleSizes.dayOfYear)}\n            data-h={getHour(circle, circleSizes.fullHour)}\n            style={getGetCircleSize(circleSizes[circle])}\n          >\n            &nbsp;\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Circles;\n"],"sourceRoot":""}