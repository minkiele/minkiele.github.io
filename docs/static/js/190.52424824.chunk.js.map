{"version":3,"file":"static/js/190.52424824.chunk.js","mappings":"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","sources":["lib/polygram/Collection.ts","apps/DemoDogs/DemoDogs.tsx"],"sourcesContent":["export interface Term {\n  getStringValue(): string;\n  asPromise(): Promise<string>;\n}\n\nexport type InputTerm = string | Term;\n\nexport class StringTerm implements Term {\n  constructor(private term: string) {}\n  public getStringValue(): string {\n    return this.term;\n  }\n  public toString(): string {\n    return this.getStringValue();\n  }\n  public asPromise(): Promise<string> {\n    return Promise.resolve(this.getStringValue());\n  }\n}\n\nconst normalizeTerm = (term: InputTerm): Term =>\n  typeof term === \"string\" ? new StringTerm(term) : term;\n\nexport class WeightedTerm implements Term {\n  private term: Term;\n  private _weight: number = 0;\n  public get weight() {\n    return this._weight;\n  }\n\n  public constructor(term: InputTerm, weight = 0) {\n    this.term = normalizeTerm(term);\n    if (weight < 0) {\n      throw new Error(\"Term weight must be >= 0\");\n    }\n    this._weight = weight;\n  }\n  public getStringValue(): string {\n    return this.term.getStringValue();\n  }\n  public toString(): string {\n    return this.getStringValue();\n  }\n  public asPromise(): Promise<string> {\n    return Promise.resolve(this.getStringValue());\n  }\n}\n\nexport class WeightedCollection implements Term {\n  private collection: Array<WeightedTerm> = [];\n  private weight = 0;\n  private weights: Array<number> = [];\n  public constructor(...collection: Array<InputTerm>) {\n    if (collection.length <= 0) {\n      throw new Error(\"Collection must have at least one element\");\n    }\n    this.collection = collection\n      .map((term) =>\n        term instanceof WeightedTerm ? term : new WeightedTerm(term)\n      )\n      .sort((a, b) => a.weight - b.weight);\n    this.weights = this.collection.reduce<Array<number>>(\n      (weights, term, index) => [\n        ...weights,\n        term.weight + (index > 0 ? weights[index - 1] : 0) + 1,\n      ],\n      []\n    );\n    this.weight =\n      this.collection.reduce((sum, term) => sum + term.weight, 0) +\n      this.collection.length;\n  }\n  protected getRandomIndex(): number {\n    const randomWeight = Math.floor(Math.random() * this.weight);\n    let i = 0;\n    for (; i < this.weights.length; i += 1) {\n      if (randomWeight < this.weights[i]) {\n        break;\n      }\n    }\n    return i;\n  }\n  public getStringValue(): string {\n    return this.collection[this.getRandomIndex()].getStringValue();\n  }\n  public toString(): string {\n    return this.getStringValue();\n  }\n  public forExpansion(): WeightedTerm {\n    return new WeightedTerm(this, this.weight);\n  }\n  public asPromise(): Promise<string> {\n    return Promise.resolve(this.getStringValue());\n  }\n}\n\nexport class TermsJoiner implements Term {\n  private parts: Array<Term>;\n  private separator = \"\";\n  public constructor(...parts: Array<InputTerm>) {\n    this.parts = parts.map((term) =>\n      typeof term === \"string\" ? new StringTerm(term) : term\n    );\n  }\n  public withSeparator(separator: string): this {\n    this.separator = separator;\n    return this;\n  }\n  public getStringValue(): string {\n    return this.parts.map((part) => part.getStringValue()).join(this.separator);\n  }\n  public toString(): string {\n    return this.getStringValue();\n  }\n  public asPromise(): Promise<string> {\n    return Promise.resolve(this.getStringValue());\n  }\n}\n\nexport class SpaceJoiner extends TermsJoiner {\n  public constructor(...parts: Array<InputTerm>) {\n    super(...parts);\n    this.withSeparator(\" \");\n  }\n}\n\nexport const join = (...terms: Array<InputTerm>): TermsJoiner => new TermsJoiner(...terms);\nexport const pickOne = (...terms: Array<InputTerm>): WeightedCollection => new WeightedCollection(...terms);\nexport const maybePickOne = (...terms: Array<InputTerm>): WeightedCollection => pickOne(\"\", pickOne(...terms).forExpansion());\nexport const weight = (term: InputTerm, weight?: number) => new WeightedTerm(term, weight);\n\n// DEMODOGS :D\n// const barbon = join(\"Barbon\", pickOne(\"e\", \"cino\"));\n// const volp = join(\"Volp\", pickOne(\"ino\", \"one\"));\n\n// const races = pickOne(\n//   \"Carlino\",\n//   \"Pastore\",\n//   \"Beagle\",\n//   \"Mastino\",\n//   weight(barbon, 2),\n//   weight(volp, 2),\n//   \"Shiba\",\n//   \"Chihuahua\",\n//   \"Lupo\",\n//   \"Cirneco\",\n//   \"Rottweiler\",\n//   \"Dobermann\",\n//   \"Pitbull\",\n//   \"Labrador\",\n//   \"Golden\",\n//   \"Schnauzer\",\n//   \"Akita\",\n//   \"Bull\",\n//   \"Levriero\",\n//   \"Dalmata\",\n//   \"Boxer\",\n//   \"Bulldog\",\n//   \"Jack\",\n//   \"Alano\",\n//   \"Basset\",\n//   \"Bassotto\",\n//   \"Bouledogue\"\n// );\n\n// const variants = pickOne(\"Inu\", \"Retriever\", \"Terrier\", \"Russell\", \"Hound\", \"Spaniel\");\n\n// const nationalities = pickOne(\n//   \"Napoletano\",\n//   \"Americano\",\n//   \"Tedesco\",\n//   \"Cecoslovacco\",\n//   \"Inglese\",\n//   \"Italiano\",\n//   \"dell'Etna\",\n//   \"Messicano\",\n//   \"Australiano\",\n//   \"Giapponese\",\n//   \"Afghano\",\n//   \"Francese\"\n// );\n// const dogRaces = join(\n//   races,\n//   pickOne(\"\", weight(variants, 2)),\n//   pickOne(\"\", weight(nationalities, 2))\n// ).withSeparator(\" \");\n\n// // for (var i = 0; i < 10; i += 1) {\n// //  console.log(dogRaces.toString().trim());\n// // }\n\n// const seniority = pickOne(\"Junior\", \"Senior\");\n// const preAdj = pickOne(\"Inclusion\", \"Human\", \"Pragmatic\");\n// const adjectives = pickOne(\"UX\", \"UI\", \"CX\", \"Web\", \"Testing\", \"Quality\", \"Quality Assurance\", \"Project\");\n// const assistant = join(\"Assistant\", pickOne(\"\", \"Extraordinaire\")).withSeparator(' ');\n// const jobTitle = pickOne(\"Developer\", \"Designer\", \"Consultant\", \"VP\", \"Vice President\", \"President\", \"Advocate\", \"Evangelist\", \"Manager\", \"Intern\", assistant, \"Master\");\n\n// const jobTitles = join(maybePickOne(seniority), pickOne(\"\", preAdj), maybePickOne(adjectives), jobTitle).withSeparator(' ');\n\n// for (var i = 0; i < 10; i += 1) {\n//   console.log(jobTitles.toString().trim());\n// }\n","import { FunctionComponent, useState } from \"react\";\nimport { join, pickOne, weight } from \"../../lib/polygram/Collection\";\n\n// DEMODOGS :D\n\nconst barbon = join(\"Barbon\", pickOne(\"e\", \"cino\"));\nconst volp = join(\"Volp\", pickOne(\"ino\", \"one\"));\n\nconst races = pickOne(\n  \"Carlino\",\n  \"Pastore\",\n  \"Beagle\",\n  \"Mastino\",\n  weight(barbon, 2),\n  weight(volp, 2),\n  \"Shiba\",\n  \"Chihuahua\",\n  \"Lupo\",\n  \"Cirneco\",\n  \"Rottweiler\",\n  \"Dobermann\",\n  \"Pitbull\",\n  \"Labrador\",\n  \"Golden\",\n  \"Schnauzer\",\n  \"Akita\",\n  \"Bull\",\n  \"Levriero\",\n  \"Dalmata\",\n  \"Boxer\",\n  \"Bulldog\",\n  \"Jack\",\n  \"Alano\",\n  \"Basset\",\n  \"Bassotto\",\n  \"Bouledogue\"\n);\n\nconst variants = pickOne(\n  \"Inu\",\n  \"Retriever\",\n  \"Terrier\",\n  \"Russell\",\n  \"Hound\",\n  \"Spaniel\"\n);\n\nconst nationalities = pickOne(\n  \"Napoletano\",\n  \"Americano\",\n  \"Tedesco\",\n  \"Cecoslovacco\",\n  \"Inglese\",\n  \"Italiano\",\n  \"dell'Etna\",\n  \"Messicano\",\n  \"Australiano\",\n  \"Giapponese\",\n  \"Afghano\",\n  \"Francese\"\n);\nconst dogRaces = join(\n  races,\n  pickOne(\"\", weight(variants, 2)),\n  pickOne(\"\", weight(nationalities, 2))\n).withSeparator(\" \");\n\nconst getDemoDogs = (): Array<string> => {\n  const demoDogs: Array<string> = [];\n  for (let i = 0; i < 10; i += 1) {\n    demoDogs.push(dogRaces.toString().trim());\n  }\n  return demoDogs;\n};\n\nconst DemoDogs: FunctionComponent = () => {\n  const [demoDogs, setDemoDogs] = useState<Array<string>>(getDemoDogs());\n  const handleDemoDogs = () => {\n    setDemoDogs(getDemoDogs());\n  };\n  return (\n    <div>\n      <p>This was inspired by Polygen, I wanted to create a suite of functions that could help you write a Polygen-like generative grammar.\n        The verbs are very limited but they do most of the work you need. The challenge for me here was to pick out an element from a weighted collection.\n        The pseudo-random generator does not work very well here, too many terms are repeated but it seems ok.</p>\n      <div>\n        <h3>Dog breeds</h3>\n        <ul>\n          {demoDogs.map((demoDog) => (\n            <li key={demoDog}>{demoDog}</li>\n          ))}\n        </ul>\n        <button onClick={handleDemoDogs}>Gimme more dog breeds</button>\n      </div>\n    </div>\n  );\n};\n\nexport default DemoDogs;\n"],"names":["StringTerm","term","this","getStringValue","Promise","resolve","normalizeTerm","WeightedTerm","weight","_weight","Error","WeightedCollection","collection","weights","length","map","sort","a","b","reduce","index","sum","randomWeight","Math","floor","random","i","getRandomIndex","TermsJoiner","parts","separator","part","join","terms","pickOne","barbon","volp","races","variants","nationalities","dogRaces","withSeparator","getDemoDogs","demoDogs","push","toString","trim","useState","setDemoDogs","demoDog","onClick"],"sourceRoot":""}