{"version":3,"file":"static/js/655.a9144b02.chunk.js","mappings":"+LAAMA,EAAYC,OAAO,KACnBC,EAAYD,OAAO,KASzB,IAAME,EAAqB,GAE3B,SAASC,EAAOD,GACZ,IAVYE,EAAYC,EAUlBC,EAAW,CAACL,GAClB,GAAIC,EAASK,OAAQ,CAEjB,IADA,IAAMC,EAAeN,EAASA,EAASK,OAAS,GACvCE,EAAI,EAAGA,EAAID,EAAQD,OAAS,EAAGE,GAAK,EACzCH,EAAII,MAdAN,EAcYI,EAAQC,GAdRJ,EAcYG,EAAQC,EAAI,GAbzCL,IAAOC,EAAKN,EAAIE,IAenBK,EAAII,KAAKT,EACb,CACAC,EAASQ,KAAKJ,EAClB,CAEA,IAAK,IAAIK,EAAI,EAAGA,EAAIC,KAAKC,IAAI,EAAG,GAAIF,GAAK,EACrCR,EAAOD,GAGX,IAAMY,EAAgB,IAChBC,EAAgB,IAEtB,SAASC,EAAYV,GAA+D,IAArDW,EAAY,uDAAGH,EAAOI,EAAY,uDAAGH,EAChE,OAAOT,EAAIa,KAAI,SAAAC,GAAM,OAAIA,IAAWnB,EAAIiB,EAAOD,CAAI,IAAEI,KAAK,GAC9D,CAUO,SAASC,EAAqBpB,GAAgF,IAA5De,EAAY,uDAAGH,EAAOI,EAAY,uDAAGH,EAC1F,OAAOb,EAASiB,KAAI,SAAAb,GAAG,OAAIU,EAAYV,EAAKW,EAAMC,EAAK,GAC3D,CC5CA,MAAmC,oC,SCyCnC,EAnCqC,WACnC,OAAkCK,EAAAA,EAAAA,UAAiB,GAAE,eAA9CC,EAAS,KAAEC,EAAY,KAQxBC,GAAeC,EAAAA,EAAAA,UAAQ,kBF+BxB,SAA0BzB,GAC7B,OAAOoB,EAAqBpB,EADiC,uDAAGY,EAAmB,uDAAGC,GACpCM,KAAK,KAC3D,CEjCqCO,CFmB9B,WAEH,IAFiD,IAAzBC,EAAK,gEAAG,EAAG,GAC7B3B,EAAqB,GAClBS,EAAI,EAAGA,EAAIkB,EAAOlB,GAAK,EAC5BR,EAAOD,GAEX,OAAOA,CACX,CEzBsD4B,CAAY,KAAD,IAAC,EAAKN,IAAY,IAAK,IAAI,GAAE,CAACA,IAE7F,OACE,4BACE,kKACiE,+BAAY,6CAG7E,iCACE,oDACA,mBAAOO,QAAQ,eAAc,kCACP,yBAAMP,IAAgB,cAAG,EAAGA,GAAS,YAE1D,KACD,kBACEQ,GAAG,eACHC,KAAK,SACLC,SAxBsD,SAACC,GAC7D,IAAMC,EAAeC,SAASF,EAAIG,OAAOC,OACrCH,GAAgB,GAClBX,EAAaW,EAEjB,EAoBQG,MAAOf,QAGX,gBAAKgB,UAAWC,EAAwB,SAAEf,MAGhD,C","sources":["lib/triangles-dragons/triangles.ts","webpack://minkiele.github.io/./src/apps/Triangles/Triangles.module.scss?a3e2","apps/Triangles/Triangles.tsx"],"sourcesContent":["const P: Symbol = Symbol('P');\r\nconst D: Symbol = Symbol('D');\r\n\r\nfunction Oddity(O1: Symbol, O2: Symbol): Symbol {\r\n    return O1 === O2 ? P : D;\r\n}\r\n\r\ntype Row = Array<Symbol>;\r\ntype Triangle = Array<Row>;\r\n\r\nconst triangle: Triangle = [];\r\n\r\nfunction addRow(triangle: Triangle) {\r\n    const row: Row = [D];\r\n    if (triangle.length) {\r\n        const lastRow: Row = triangle[triangle.length - 1];\r\n        for (let j = 0; j < lastRow.length - 1; j += 1) {\r\n            row.push(Oddity(lastRow[j], lastRow[j + 1]));\r\n        }\r\n        row.push(D);\r\n    }\r\n    triangle.push(row);\r\n}\r\n\r\nfor (let i = 0; i < Math.pow(2, 8); i += 1) {\r\n    addRow(triangle);\r\n}\r\n\r\nconst P_REP: string = ' ';\r\nconst D_REP: string = '*';\r\n\r\nfunction rowToString(row: Row, PRep: string = P_REP, DRep: string = D_REP): string {\r\n    return row.map(single => single === D ? DRep : PRep).join('');\r\n}\r\n\r\nexport function getTriangle(limit = 2**8): Triangle {\r\n    const triangle: Triangle = [];\r\n    for (let i = 0; i < limit; i += 1) {\r\n        addRow(triangle);\r\n    }\r\n    return triangle;\r\n}\r\n\r\nexport function triangleToStringRows(triangle: Triangle, PRep: string = P_REP, DRep: string = D_REP): Array<string> {\r\n    return triangle.map(row => rowToString(row, PRep, DRep));\r\n}\r\n\r\nexport function triangleToString(triangle: Triangle, PRep: string = P_REP, DRep: string = D_REP): string {\r\n    return triangleToStringRows(triangle, PRep, DRep).join('\\n');\r\n}\r\n\r\n// console.log(triangleToString(triangle));\r\n","// extracted by mini-css-extract-plugin\nexport default {\"triangles_render\":\"Triangles_triangles_render__jFLu7\"};","import { ChangeEventHandler, FunctionComponent, useMemo, useState } from \"react\";\nimport {\n  getTriangle,\n  triangleToString,\n} from \"../../lib/triangles-dragons/triangles\";\nimport styles from './Triangles.module.scss';\n\nconst Triangles: FunctionComponent = () => {\n  const [triangles, setTriangles] = useState<number>(4);\n  const handleTriangles: ChangeEventHandler<HTMLInputElement> = (evt) => {\n    const newTriangles = parseInt(evt.target.value);\n    if (newTriangles >= 0) {\n      setTriangles(newTriangles);\n    }\n  };\n\n  const cachedRender = useMemo(() => triangleToString(getTriangle(2 ** triangles), ' ', '*'), [triangles]);\n\n  return (\n    <div>\n      <p>This is a graphic representation of the Fibonacci sequence, where the\n        fillings are odd numbers and the void are even numbers. Using 2<sup>n</sup> steps\n        helps rendering full triangles.\n      </p>\n      <fieldset>\n        <legend>Generator controls</legend>\n        <label htmlFor=\"newTriangles\">\n          This will generate 2<sup>{triangles}</sup> ({2**triangles}) rows\n        </label>\n        {' '}\n        <input\n          id=\"newTriangles\"\n          type=\"number\"\n          onChange={handleTriangles}\n          value={triangles}\n        />\n      </fieldset>\n      <pre className={styles.triangles_render}>{cachedRender}</pre>\n    </div>\n  );\n};\n\nexport default Triangles;\n"],"names":["P","Symbol","D","triangle","addRow","O1","O2","row","length","lastRow","j","push","i","Math","pow","P_REP","D_REP","rowToString","PRep","DRep","map","single","join","triangleToStringRows","useState","triangles","setTriangles","cachedRender","useMemo","triangleToString","limit","getTriangle","htmlFor","id","type","onChange","evt","newTriangles","parseInt","target","value","className","styles"],"sourceRoot":""}