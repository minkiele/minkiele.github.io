{"version":3,"file":"static/js/287.c6b4f034.chunk.js","mappings":"+LACA,EAA0B,yBAA1B,EAA6E,yCAA7E,EAAuI,gCCiBjIA,EAAiB,SAACC,EAAeC,GACnC,OAAOD,GACH,KAAK,EAAG,OAJG,SAACC,GAAY,OAAcA,EAAO,IAAM,IAAMA,EAAO,MAAQ,GAAKA,EAAO,MAAS,EAAG,CAIjFC,CAAWD,GAAQ,GAAK,GACvC,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAI,OAAO,GAChB,QAAS,OAAO,GAExB,EAEME,EAAc,SAACC,EAAaJ,EAAeC,GAAY,OAAaG,EAAML,EAAeC,EAAOC,EAAM,EAGtGI,EAAgB,SAACC,GAAc,OAAaA,EAAS,EAAG,EAEjDC,EAAe,SAACC,EAAcR,EAAeC,GAEtD,IADA,IAAIQ,EAASD,EACLE,EAAI,EAAGA,EAAIV,EAAOU,GAAK,EAC3BD,GAAUV,EAAeW,EAAGT,GAEhC,OAAOQ,CACX,EAaaE,EAAmB,SAACC,GAG7B,IAAMC,EAAW,IAAG,SAAID,EAAQ,IAEhC,MAAO,CACHE,MAAM,GAAD,OAAKD,EAAQ,KAClBE,OAAO,GAAD,OAAKF,EAAQ,KAE3B,EAEaG,EAA0C,CACnD,MACA,OACA,QACA,OACA,SACA,U,SC5DEC,EAAiB,WAAH,ODgCS,SAACT,GAAU,MAAiB,CACrDJ,KAfgBA,EAeAI,EAAKU,WAfsBd,EAAM,GAAK,EAAK,GAAK,GAgBhEI,KAAML,EAAYK,EAAKW,UAAWX,EAAKY,WAAYZ,EAAKa,eACxDrB,OAfkBA,EAeEQ,EAAKY,YAfoBpB,EAAQ,GAAK,IAgB1DsB,MAfiBA,EAeCd,EAAKe,WAfmBD,EAAO,IAgBjDhB,OAAQD,EAAcG,EAAKgB,cAC3BC,OAAQpB,EAAcG,EAAKkB,cAC3BC,UAAWpB,EAAaC,EAAKW,UAAWX,EAAKY,WAAYZ,EAAKa,eAC9DO,SAAUpB,EAAKe,YAnBC,IAACD,EADCtB,EAFFI,CAuBnB,CCzC4ByB,CAAc,IAAIC,KAAQ,EA0DvD,EAxDmC,WACjC,OAAsCC,EAAAA,EAAAA,UAAoBd,KAAiB,eAApEe,EAAW,KAAEC,EAAc,MAElCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,aAAY,WAC7BH,EAAehB,IACjB,GAAG,KACH,OAAO,WACLoB,cAAcF,EAChB,CACF,GAAG,IAEH,IAAMG,GAASC,EAAAA,EAAAA,cACb,SAACC,EAAiCC,GAChC,MAAkB,SAAXD,GAAgC,QAAXA,GAA+B,UAAXA,EAC5CC,OACAC,CACN,GACA,IAGIC,GAAUJ,EAAAA,EAAAA,cACd,SAACC,EAAiClB,GAChC,MAAkB,SAAXkB,GAAgC,WAAXA,GAAkC,WAAXA,EAC/ClB,OACAoB,CACN,GACA,IAGIE,GACJ,gBAAKC,UAAWC,EAAe,SAC5B9B,EAAQ+B,KAAI,SAACP,GAAM,OAClB,gBAAKK,UAAWC,EAA+B,UAC7C,gBACED,UAAWC,EACX,WAAUR,EAAOE,EAAQR,EAAYL,WACrC,SAAQgB,EAAQH,EAAQR,EAAYJ,UACpCoB,MAAOrC,EAAiBqB,EAAYQ,OALaA,EAO/C,MAIZ,OACE,4BACE,waAKCI,IAGP,C","sources":["webpack://minkiele.github.io/./src/apps/Circles/Circles.module.scss?1060","apps/Circles/Circles.utils.ts","apps/Circles/Circles.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"circles\":\"Circles_circles__rlRZi\",\"circles_circleContainer\":\"Circles_circles_circleContainer__4adpf\",\"circles_circle\":\"Circles_circles_circle__TivyK\"};","import { CSSProperties } from \"react\";\n\nexport interface ClockRelativeSize {\n    day: number;\n    date: number;\n    month: number;\n    hour: number;\n    minute: number;\n    second: number;\n}\n\nexport interface ClockData extends ClockRelativeSize {\n    dayOfYear: number;\n    fullHour: number;\n}\n\nconst isLeapYear = (year: number): boolean => year % 4 === 0 && (year % 100 !== 0 || year % 4000 === 0);\n\nconst getDaysInMonth = (month: number, year: number): number => {\n    switch(month) {\n        case 1: return isLeapYear(year) ? 29 : 28;\n        case 3:\n        case 5:\n        case 8:\n        case 10: return 30;\n        default: return 31;\n    }\n};\nconst getDaySize = (day: number): number => (((day + 6) % 7) + 1) / 7;\nconst getDateSize = (day: number, month: number, year: number): number => day / getDaysInMonth(month, year);\nconst getMonthSize = (month: number): number => (month + 1) / 12;\nconst getHourSize = (hour: number): number => hour / 24;\nconst getMinuteSize = (minute: number): number => minute / 60;\n\nexport const getDayOfYear = (date: number, month: number, year: number): number => {\n    let output = date;\n    for(let m = 0; m < month; m += 1) {\n        output += getDaysInMonth(m, year);\n    }\n    return output;\n};\n\nexport const getClockSizes = (date: Date): ClockData => ({\n    day: getDaySize(date.getDay()),\n    date: getDateSize(date.getDate(), date.getMonth(), date.getFullYear()),\n    month: getMonthSize(date.getMonth()),\n    hour: getHourSize(date.getHours()),\n    minute: getMinuteSize(date.getMinutes()),\n    second: getMinuteSize(date.getSeconds()),\n    dayOfYear: getDayOfYear(date.getDate(), date.getMonth(), date.getFullYear()),\n    fullHour: date.getHours(),\n});\n\nexport const getGetCircleSize = (size: number): CSSProperties => {\n    // Diameter is proportional to the occupied area, not to the radius\n    // We don't need PI, after normalization it's just the diameter square root\n    const diameter = 100 * (size ** 0.5);\n\n    return {\n        width: `${diameter}%`,\n        height: `${diameter}%`,\n    };\n};\n\nexport const CIRCLES: Array<keyof ClockRelativeSize> = [\n    \"day\",\n    \"date\",\n    \"month\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n  ];\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport styles from \"./Circles.module.scss\";\nimport {\n  CIRCLES,\n  ClockData,\n  ClockRelativeSize,\n  getClockSizes,\n  getGetCircleSize,\n} from \"./Circles.utils\";\n\nconst getCircleSizes = () => getClockSizes(new Date());\n\nconst Circles: FunctionComponent = () => {\n  const [circleSizes, setCircleSizes] = useState<ClockData>(getCircleSizes());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCircleSizes(getCircleSizes());\n    }, 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const getDoy = useCallback(\n    (circle: keyof ClockRelativeSize, doy: number): number | undefined => {\n      return circle === \"date\" || circle === \"day\" || circle === \"month\"\n        ? doy\n        : undefined;\n    },\n    []\n  );\n\n  const getHour = useCallback(\n    (circle: keyof ClockRelativeSize, hour: number): number | undefined => {\n      return circle === \"hour\" || circle === \"minute\" || circle === \"second\"\n        ? hour\n        : undefined;\n    },\n    []\n  );\n\n  const renderedApp = (\n    <div className={styles.circles}>\n      {CIRCLES.map((circle) => (\n        <div className={styles.circles_circleContainer} key={circle}>\n          <div\n            className={styles.circles_circle}\n            data-doy={getDoy(circle, circleSizes.dayOfYear)}\n            data-h={getHour(circle, circleSizes.fullHour)}\n            style={getGetCircleSize(circleSizes[circle])}\n          ></div>\n        </div>\n      ))}\n    </div>\n  );\n  return (\n    <div>\n      <p>This is a full clock that renders all the date and time parameters that can be limited into a range.\n        Circles are filled in relation to the area, not the radius, and that's a curious effect because you don't expect\n        how the same area occupied at the start of a period is free at the end of said period. Also date and time colors\n        are statically interpolated and are set for every hour and every day.\n        </p>\n      {renderedApp}\n    </div>\n  );\n};\n\nexport default Circles;\n"],"names":["getDaysInMonth","month","year","isLeapYear","getDateSize","day","getMinuteSize","minute","getDayOfYear","date","output","m","getGetCircleSize","size","diameter","width","height","CIRCLES","getCircleSizes","getDay","getDate","getMonth","getFullYear","hour","getHours","getMinutes","second","getSeconds","dayOfYear","fullHour","getClockSizes","Date","useState","circleSizes","setCircleSizes","useEffect","intervalId","setInterval","clearInterval","getDoy","useCallback","circle","doy","undefined","getHour","renderedApp","className","styles","map","style"],"sourceRoot":""}