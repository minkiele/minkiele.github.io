{"version":3,"file":"static/js/172.88842934.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","lib/triangles-dragons/matrix/plane.ts","lib/triangles-dragons/matrix/line.ts","lib/triangles-dragons/matrix/orientation-matrix.ts","lib/triangles-dragons/matrix/matrix.ts","lib/triangles-dragons/matrix/printable-direction-matrix.ts","lib/triangles-dragons/dragons.ts","apps/Dragons/Dragons.tsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export namespace Plane {\r\n\r\n    export enum Orientation {\r\n        N = 0,\r\n        E = 1,\r\n        S = 2,\r\n        W = 3\r\n    }\r\n\r\n    export enum Direction {\r\n        L, R\r\n    }\r\n\r\n    export function getOppositeOrientation(orientation: Orientation): Orientation {\r\n        return (orientation + 2) % 4;\r\n    }\r\n\r\n    function turnLeft(orientation: Orientation): Orientation {\r\n        return (orientation + 3) % 4;\r\n    }\r\n\r\n    function turnRight(orientation: Orientation): Orientation {\r\n        return (orientation + 1) % 4;\r\n    }\r\n\r\n    export function getNextOrientation(direction: Direction, currentOrientation: Orientation): Orientation {\r\n        switch(direction) {\r\n            case Direction.L: return turnLeft(currentOrientation);\r\n            case Direction.R: return turnRight(currentOrientation);\r\n            default: throw new Error('Unrecognized direction');\r\n        }\r\n    }\r\n\r\n}\r\n","export namespace Line {\r\n\r\n    export enum Char {\r\n        EMPTY = ' ',\r\n        EW = '\\u2500', // ─\r\n        NS = '\\u2502', // │\r\n        ES = '\\u250c', // ┌\r\n        SW = '\\u2510', // ┐\r\n        NE = '\\u2514', // └\r\n        NW = '\\u2518', // ┘\r\n        NES = '\\u251c', // ├\r\n        NSW = '\\u2524', // ┤\r\n        ESW = '\\u252c', // ┬\r\n        NEW = '\\u2534', // ┴\r\n        NESW = '\\u253c', // ┼\r\n        W = '\\u2574', // ╴\r\n        N = '\\u2575', // ╵\r\n        E = '\\u2576', // ╶\r\n        S = '\\u2577' // ╷\r\n    }\r\n\r\n    type Bitwise<T extends number> = 0 | T;\r\n\r\n    export class Line {\r\n        private $_N: Bitwise<1> = 0;\r\n        private $_E: Bitwise<2> = 0;\r\n        private $_S: Bitwise<4> = 0;\r\n        private $_W: Bitwise<8> = 0;\r\n        public get W(): boolean {\r\n            return this.$_W !== 0;\r\n        }\r\n        public set W(status: boolean) {\r\n            this.$_W = status ? 8 : 0;\r\n        }\r\n        public get N(): boolean {\r\n            return this.$_N !== 0;\r\n        }\r\n        public set N(status: boolean) {\r\n            this.$_N = status ? 1 : 0;\r\n        }\r\n        public get S(): boolean {\r\n            return this.$_S !== 0;\r\n        }\r\n        public set S(status: boolean) {\r\n            this.$_S = status ? 4 : 0;\r\n        }\r\n        public get E(): boolean {\r\n            return this.$_E !== 0;\r\n        }\r\n        public set E(status: boolean) {\r\n            this.$_E = status ? 2 : 0;\r\n        }\r\n        public constructor(\r\n            N: boolean = false,\r\n            E: boolean = false,\r\n            S: boolean = false,\r\n            W: boolean = false) {\r\n            this.W = W;\r\n            this.N = N;\r\n            this.S = S;\r\n            this.E = E;\r\n        }\r\n\r\n        public unite(line: Line): Line {\r\n            return new Line(\r\n                this.N || line.N,\r\n                this.E || line.E,\r\n                this.S || line.S,\r\n                this.W || line.W\r\n            );\r\n        }\r\n\r\n        public intersecate(line: Line): Line {\r\n            return new Line(\r\n                this.N && line.N,\r\n                this.E && line.E,\r\n                this.S && line.S,\r\n                this.W && line.W\r\n            );\r\n        }\r\n\r\n        public negate(): Line {\r\n            return new Line(\r\n                !this.N,\r\n                !this.E,\r\n                !this.S,\r\n                !this.W\r\n            );\r\n        }\r\n\r\n        public toString(): string {\r\n            const bits: number = this.$_W | this.$_N | this.$_S | this.$_E;\r\n            switch (bits) {\r\n                case 0:  return Char.EMPTY;\r\n                case 1:  return Char.N;\r\n                case 2:  return Char.E;\r\n                case 3:  return Char.NE;\r\n                case 4:  return Char.S;\r\n                case 5:  return Char.NS;\r\n                case 6:  return Char.ES;\r\n                case 7:  return Char.NES;\r\n                case 8:  return Char.W;\r\n                case 9:  return Char.NW;\r\n                case 10: return Char.EW;\r\n                case 11: return Char.NEW;\r\n                case 12: return Char.SW;\r\n                case 13: return Char.NSW;\r\n                case 14: return Char.ESW;\r\n                case 15: return Char.NESW;\r\n                default: throw new Error('Unrecognized symbol');\r\n            }\r\n        }\r\n\r\n    }\r\n    export function getLine(char: Char): Line {\r\n        let bitmask: number;\r\n        switch (char) {\r\n            case Char.EMPTY: bitmask = 0; break;\r\n            case Char.N: bitmask = 1; break;\r\n            case Char.E: bitmask = 2; break;\r\n            case Char.NE: bitmask = 3; break;\r\n            case Char.S: bitmask = 4; break;\r\n            case Char.NS: bitmask = 5; break;\r\n            case Char.ES: bitmask = 6; break;\r\n            case Char.NES: bitmask = 7; break;\r\n            case Char.W: bitmask = 8; break;\r\n            case Char.NW: bitmask = 9; break;\r\n            case Char.EW: bitmask = 10; break;\r\n            case Char.NEW: bitmask = 11; break;\r\n            case Char.SW: bitmask = 12; break;\r\n            case Char.NSW: bitmask = 13; break;\r\n            case Char.ESW: bitmask = 14; break;\r\n            case Char.NESW: bitmask = 15; break;\r\n            default: throw new Error('Unrecognized char');\r\n        }\r\n        return new Line(Boolean(bitmask & 1), Boolean(bitmask & 2), Boolean(bitmask & 4), Boolean(bitmask & 8));\r\n    }\r\n\r\n}\r\n","import { Matrix } from './matrix';\r\nimport { Plane } from './plane';\r\n\r\nexport class OrientationMatrix<T> extends Matrix<T> {\r\n\r\n    protected row: number = 0;\r\n    protected column: number = 0;\r\n\r\n    public constructor(protected orientation: Plane.Orientation) {\r\n        super();\r\n    }\r\n\r\n    public move(orientation: Plane.Orientation): this {\r\n        switch (orientation) {\r\n            case Plane.Orientation.N:\r\n                if (this.row === 0) {\r\n                    this.addRow(0);\r\n                } else {\r\n                    this.row -= 1;\r\n                }\r\n                break;\r\n            case Plane.Orientation.S:\r\n                this.row += 1;\r\n                if (this.row === this.rows) {\r\n                    this.addRow(this.row);\r\n                }\r\n                break;\r\n            case Plane.Orientation.W:\r\n                if (this.column === 0) {\r\n                    this.addColumn(0);\r\n                } else {\r\n                    this.column -= 1;\r\n                }\r\n                break;\r\n            case Plane.Orientation.E:\r\n                this.column += 1;\r\n                if (this.column === this.columns) {\r\n                    this.addColumn(this.column);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown direction`);\r\n        }\r\n\r\n        this.orientation = orientation;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n}\r\n","export class Matrix<T> {\r\n\r\n    protected matrix: Array<Array<T | null>> = [];\r\n    protected rows: number = 0;\r\n    protected columns: number = 0;\r\n\r\n    public setContent(content: T, row: number, column: number): this {\r\n        this.ensureMatrixSize(row + 1, column + 1);\r\n        this.matrix[row][column] = content;\r\n        return this;\r\n    }\r\n\r\n    public getContent(row: number, column: number): T {\r\n        if (row >= 0 && row < this.rows && column >= 0 && column < this.columns) {\r\n            return this.matrix[row][column] as T;\r\n        } else {\r\n            throw new Error('ArrayIndexOutOfBoundException');\r\n        }\r\n    }\r\n\r\n    private ensureMatrixSize(rows: number, columns: number) {\r\n        for (let j = this.columns; j < columns; j += 1) {\r\n            this.addColumn(j);\r\n        }\r\n        for (let i: number = this.rows; i < rows; i += 1) {\r\n            this.addRow(i);\r\n        }\r\n    }\r\n\r\n    private normalizeRowIndex(row: number): number {\r\n        return Math.max(0, Math.min(row, this.rows));\r\n    }\r\n\r\n    private normalizeColumnIndex(column: number): number {\r\n        return Math.max(0, Math.min(column, this.columns));\r\n    }\r\n\r\n    public addRow(row: number): this {\r\n        const normalizedRow: number = this.normalizeRowIndex(row);\r\n        const newRow: Array<T | null> = [];\r\n        for (let i = 0; i < this.columns; i += 1) {\r\n            newRow.push(null);\r\n        }\r\n        this.matrix.splice(normalizedRow, 0, newRow);\r\n        this.rows += 1;\r\n        return this;\r\n    }\r\n\r\n    public addColumn(column: number): this {\r\n        const normalizedColumn: number = this.normalizeColumnIndex(column);\r\n        for (let i = 0; i < this.rows; i += 1) {\r\n            this.matrix[i].splice(normalizedColumn, 0, null);\r\n        }\r\n        this.columns += 1;\r\n        return this;\r\n    }\r\n\r\n    public getRows() {\r\n        return this.rows;\r\n    }\r\n\r\n    public getColumns() {\r\n        return this.columns;\r\n    }\r\n\r\n    public getSize() {\r\n        return this.rows * this.columns;\r\n    }\r\n}\r\n","import { OrientationMatrix } from './orientation-matrix';\r\nimport { Line } from './line';\r\nimport { Plane } from './plane';\r\n\r\nexport class PrintableDirectionMatrix extends OrientationMatrix<Line.Line> {\r\n\r\n    public step(newOrientation: Plane.Orientation) {\r\n\r\n        const comingOrientation: Plane.Orientation = Plane.getOppositeOrientation(this.orientation);\r\n\r\n        const newLine: Line.Line = new Line.Line(\r\n            newOrientation === Plane.Orientation.N || comingOrientation === Plane.Orientation.N,\r\n            newOrientation === Plane.Orientation.E || comingOrientation === Plane.Orientation.E,\r\n            newOrientation === Plane.Orientation.S || comingOrientation === Plane.Orientation.S,\r\n            newOrientation === Plane.Orientation.W || comingOrientation === Plane.Orientation.W\r\n        );\r\n        let newContent: Line.Line;\r\n        try {\r\n            const currentContent: Line.Line = this.getContent(this.row, this.column);\r\n            newContent = currentContent.unite(newLine);\r\n        } catch (exc) {\r\n            newContent = newLine;\r\n        }\r\n        return this.setContent(newContent, this.row, this.column).move(newOrientation);\r\n\r\n    }\r\n\r\n    public turn(direction: Plane.Direction): this {\r\n        const currentOrientation: Plane.Orientation = this.orientation;\r\n        const newOrientation: Plane.Orientation = Plane.getNextOrientation(direction, currentOrientation);\r\n        return this.step(newOrientation);\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.matrix.map(row => row.map(col => col !== null ? col : ' ').join('')).join('\\n');\r\n    }\r\n\r\n}\r\n","import { Plane } from './matrix/plane';\r\nimport { PrintableDirectionMatrix } from './matrix/printable-direction-matrix';\r\n\r\nconst L_REP: string = 'L';\r\nconst R_REP: string = 'R';\r\n\r\nexport const L: Symbol = Symbol(L_REP);\r\nexport const R: Symbol = Symbol(R_REP);\r\n\r\nfunction MirrorDirections(direction: Symbol): Symbol {\r\n    switch (direction) {\r\n        case L: return R;\r\n        case R: return L;\r\n        default: throw new Error('Unknown direction');\r\n    }\r\n}\r\n\r\ntype Directions = Array<Symbol>;\r\n\r\nfunction Bend(directions: Directions, direction: Symbol): Directions {\r\n    const mirroredDirections: Directions = directions.map(MirrorDirections).reverse();\r\n    switch (direction) {\r\n        case L:\r\n        case R:\r\n            return [...directions, direction, ...mirroredDirections];\r\n        default: throw new Error('Unknown direction');\r\n    }\r\n}\r\n\r\nexport function directionsToString(directions: Directions): string {\r\n    return directions.map(direction => direction === L ? L_REP : R_REP).join('');\r\n}\r\n\r\nfunction bendToDirection(bend: Symbol): Plane.Direction {\r\n    switch (bend) {\r\n        case L:\r\n            return Plane.Direction.L;\r\n        case R:\r\n            return Plane.Direction.R;\r\n        default:\r\n            throw new Error('Unknown direction');\r\n    }\r\n}\r\n\r\nexport function getDragonFractal(iterations = 13, bendDirection = L, orientation = Plane.Orientation.E): PrintableDirectionMatrix {\r\n    let dragon: Directions = [];\r\n\r\n    for (let i = 1; i <= iterations; i += 1) {\r\n        dragon = Bend(dragon, bendDirection);\r\n    }\r\n\r\n    const matrix = new PrintableDirectionMatrix(orientation);\r\n    for (let bend of dragon) {\r\n        matrix.turn(bendToDirection(bend));\r\n    }\r\n    return matrix;\r\n}\r\n","import { ChangeEventHandler, FunctionComponent, useState } from \"react\";\nimport { getDragonFractal, L, R } from \"../../lib/triangles-dragons/dragons\";\nimport { Plane } from \"../../lib/triangles-dragons/matrix/plane\";\n\nconst Dragons: FunctionComponent = () => {\n  const [dragons, setDragons] = useState<{\n    iterations: number;\n    fold: typeof L | typeof R;\n    orientation: Plane.Orientation;\n  }>({\n    iterations: 3,\n    fold: L,\n    orientation: Plane.Orientation.E,\n  });\n  const handleDragons: ChangeEventHandler<HTMLInputElement> = (evt) => {\n    const newDragons = parseInt(evt.target.value);\n    if (newDragons > 0) {\n      setDragons((current) => ({ ...current, iterations: newDragons }));\n    }\n  };\n  const handleFold: ChangeEventHandler<HTMLInputElement> = (evt) => {\n    switch (evt.target.value) {\n      case \"L\": {\n        setDragons((current) => ({ ...current, fold: L }));\n        break;\n      }\n      case \"R\": {\n        setDragons((current) => ({ ...current, fold: R }));\n        break;\n      }\n    }\n  };\n  const handleOrientation: ChangeEventHandler<HTMLInputElement> = (evt) => {\n    switch (evt.target.value) {\n      case \"N\": {\n        setDragons((current) => ({\n          ...current,\n          orientation: Plane.Orientation.N,\n        }));\n        break;\n      }\n      case \"E\": {\n        setDragons((current) => ({\n          ...current,\n          orientation: Plane.Orientation.E,\n        }));\n        break;\n      }\n      case \"S\": {\n        setDragons((current) => ({\n          ...current,\n          orientation: Plane.Orientation.S,\n        }));\n        break;\n      }\n      case \"W\": {\n        setDragons((current) => ({\n          ...current,\n          orientation: Plane.Orientation.W,\n        }));\n        break;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <p>\n        The Dragon fractal is a fractal obtained by (ideally) folding a piece of\n        paper in half in the same direction for a number of times. The figure is\n        obtained by unfolding every fold at 90°. I was obsessed with this\n        picture since I saw it at the beginning of the chapters in Jurassic\n        Park. Twenty years later I searched for it in the Internet and found the\n        explanation.\n      </p>\n      <div>\n        <label htmlFor=\"newDragons\">\n          This will generate a dragon fractal with the specified iterations\n          (after 15 iterations will start to considerably slow down).\n        </label>\n        <input\n          id=\"newDragons\"\n          type=\"number\"\n          onChange={handleDragons}\n          value={dragons.iterations}\n        />\n        <fieldset>\n          <legend>Fold orientation</legend>\n          <input\n            type=\"radio\"\n            name=\"fold\"\n            id=\"foldLeft\"\n            value=\"L\"\n            onChange={handleFold}\n            checked={dragons.fold === L}\n          />\n          <label htmlFor=\"foldLeft\">Left</label>\n          <input\n            type=\"radio\"\n            name=\"fold\"\n            id=\"foldRight\"\n            value=\"R\"\n            onChange={handleFold}\n            checked={dragons.fold === R}\n          />\n          <label htmlFor=\"foldRight\">Right</label>\n        </fieldset>\n        <fieldset>\n          <legend>Start direction</legend>\n          <input\n            type=\"radio\"\n            name=\"orientation\"\n            id=\"orientationNorth\"\n            value=\"N\"\n            onChange={handleOrientation}\n            checked={dragons.orientation === Plane.Orientation.N}\n          />\n          <label htmlFor=\"orientationNorth\">North</label>\n          <input\n            type=\"radio\"\n            name=\"orientation\"\n            id=\"orientationEast\"\n            value=\"E\"\n            onChange={handleOrientation}\n            checked={dragons.orientation === Plane.Orientation.E}\n          />\n          <label htmlFor=\"orientationEast\">East</label>\n          <input\n            type=\"radio\"\n            name=\"orientation\"\n            id=\"orientationSouth\"\n            value=\"S\"\n            onChange={handleOrientation}\n            checked={dragons.orientation === Plane.Orientation.S}\n          />\n          <label htmlFor=\"orientationSouth\">South</label>\n          <input\n            type=\"radio\"\n            name=\"orientation\"\n            id=\"orientationWest\"\n            value=\"W\"\n            onChange={handleOrientation}\n            checked={dragons.orientation === Plane.Orientation.W}\n          />\n          <label htmlFor=\"orientationWest\">West</label>\n        </fieldset>\n      </div>\n      <pre>\n        {getDragonFractal(\n          dragons.iterations,\n          dragons.fold,\n          dragons.orientation\n        ).toString()}\n      </pre>\n    </div>\n  );\n};\n\nexport default Dragons;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","Orientation","Direction","orientation","direction","currentOrientation","L","R","turnRight","Error","Plane","OrientationMatrix","row","column","N","this","addRow","S","rows","W","addColumn","E","columns","matrix","content","ensureMatrixSize","j","Math","max","min","normalizedRow","normalizeRowIndex","newRow","push","splice","normalizedColumn","normalizeColumnIndex","Char","Line","$_N","$_E","$_S","$_W","status","line","EMPTY","NE","NS","ES","NES","NW","EW","NEW","SW","NSW","ESW","NESW","char","bitmask","Boolean","PrintableDirectionMatrix","newOrientation","newContent","comingOrientation","getOppositeOrientation","newLine","getContent","unite","exc","setContent","move","getNextOrientation","map","col","join","MirrorDirections","Bend","directions","mirroredDirections","reverse","bendToDirection","bend","getDragonFractal","iterations","bendDirection","dragon","turn","useState","fold","dragons","setDragons","handleFold","evt","target","current","handleOrientation","htmlFor","id","type","onChange","newDragons","parseInt","name","checked","toString","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}