{"version":3,"file":"static/js/706.77aac8c1.chunk.js","mappings":"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","sources":["apps/NumeriCasuali/NumeriCasuali.tsx","lib/EnunciateNumbers.ts"],"sourcesContent":["import { FunctionComponent, useState } from \"react\";\nimport { pronunciaNumero } from \"../../lib/EnunciateNumbers\";\n\nconst NUMBER_LENGTH = 32;\n\nconst getRandomNumber = (length = NUMBER_LENGTH): string => {\n  const randomLength = Math.floor(Math.random() * length) + 1;\n  let randomNumber = '';\n  while(randomNumber.length < randomLength) {\n    const randomDigit = Math.floor(Math.random() * 10);\n    // Number must not start with zeroes (unless the number is zero so we can add it)\n    if(randomLength === 1 || randomNumber.length > 0 || randomDigit !== 0) {\n      randomNumber += randomDigit;\n    }\n  }\n  return randomNumber;\n}\n\ninterface NumeroCasuale {\n  inNumero: string;\n  aParole: string;\n}\nconst pronunciaNumeroACaso = (): NumeroCasuale => {\n  const inNumero = getRandomNumber();\n  return {\n    inNumero,\n    aParole: pronunciaNumero(inNumero),\n  };\n};\n\nconst NumeriCasuali: FunctionComponent = () => {\n  const [numeroCasuale, impostaNumeroCasuale] = useState<NumeroCasuale>(pronunciaNumeroACaso());\n\n  const handleNextRandom = () => {\n    impostaNumeroCasuale(pronunciaNumeroACaso());\n  };\n\n  return (\n    <div>\n      <p>Enunciate a number in italian language. I tried to put down in code the way I think we enunciate\n        the numbers in Italy. This demo will generate a pseudo-random number between 1 and 10<sup>{NUMBER_LENGTH}</sup>,\n      but it could really go up wherever you want.</p>\n      <h2>{numeroCasuale.aParole} (<small>{numeroCasuale.inNumero}</small>)</h2>\n      <button onClick={handleNextRandom}>Prossimo numero</button>\n    </div>\n  );\n};\n\nexport default NumeriCasuali;\n","/**\n * Pronuncia numeri da 0 a 9, con parametro per mettere l'accento sul 3\n * Se stiamo stampando un numero che finisce per 3 allora aggiungi l'accento\n * @param unità\n * @returns\n */\nconst pronunciaUnità = (unità: number): string => {\n  switch (unità) {\n    case 1:\n      return \"uno\";\n    case 2:\n      return \"due\";\n    case 3:\n      return \"tre\";\n    case 4:\n      return \"quattro\";\n    case 5:\n      return \"cinque\";\n    case 6:\n      return \"sei\";\n    case 7:\n      return \"sette\";\n    case 8:\n      return \"otto\";\n    case 9:\n      return \"nove\";\n    default:\n      return \"\";\n  }\n};\n\n/**\n * Pronuncia le centinaia da 100 a 900\n * @param centinaia\n * @returns\n */\nconst pronunciaCentinaia = (centinaia: number): string => {\n  switch (centinaia) {\n    case 0:\n      return \"\";\n    case 1:\n      return \"cento\";\n    default:\n      return `${pronunciaUnità(centinaia)}cento`;\n  }\n};\n\n/**\n * Dato che 1 e 8 cominciano per una vocale omettiamo l'ultima vocale della decina\n * @param vocale\n * @param unità\n * @returns\n */\nconst aggiungiUltimaVocale = (vocale: string, unità: number): string =>\n  unità === 1 || unità === 8 ? \"\" : vocale;\n\n/**\n * Pronuncia i numeri da 1 a 99, con l'elisione dell'ultima vocale della decina se cozzano\n * @param decine\n * @param unità\n * @returns\n */\nconst pronunciaDecineEdUnità = (decine: number, unità: number): string => {\n  switch (decine) {\n    // Numeri da 1 a 9\n    case 0:\n      return pronunciaUnità(unità);\n    // I numeri da 10 a 19 sono dei casi unici\n    case 1:\n      switch (unità) {\n        case 0:\n          return \"dieci\";\n        case 1:\n          return \"undici\";\n        case 2:\n          return \"dodici\";\n        case 3:\n          return \"tredici\";\n        case 4:\n          return \"quattordici\";\n        case 5:\n          return \"quindici\";\n        case 6:\n          return \"sedici\";\n        case 7:\n          return \"diciassette\";\n        case 8:\n          return \"diciotto\";\n        case 9:\n          return \"diciannove\";\n        default:\n          return \"\";\n      }\n    // E questo è il modo standard di comporre i numeri da 20 a 99\n    case 2:\n      return `vent${aggiungiUltimaVocale(\"i\", unità)}${pronunciaUnità(unità)}`;\n    case 3:\n      return `trent${aggiungiUltimaVocale(\"a\", unità)}${pronunciaUnità(unità)}`;\n    case 4:\n      return `quarant${aggiungiUltimaVocale(\"a\", unità)}${pronunciaUnità(\n        unità\n      )}`;\n    case 5:\n      return `cinquant${aggiungiUltimaVocale(\"a\", unità)}${pronunciaUnità(\n        unità\n      )}`;\n    case 6:\n      return `sessant${aggiungiUltimaVocale(\"a\", unità)}${pronunciaUnità(\n        unità\n      )}`;\n    case 7:\n      return `settant${aggiungiUltimaVocale(\"a\", unità)}${pronunciaUnità(\n        unità\n      )}`;\n    case 8:\n      return `ottant${aggiungiUltimaVocale(\"a\", unità)}${pronunciaUnità(\n        unità\n      )}`;\n    case 9:\n      return `novant${aggiungiUltimaVocale(\"a\", unità)}${pronunciaUnità(\n        unità\n      )}`;\n    // Typescript vuole il caso di default\n    default:\n      return \"\";\n  }\n};\n\n/**\n * La pronuncia della potenza è ricorsiva, e ci serve un caso speciale se stiamo\n * maneggiando potenze di 10 da 1000 in su\n * @param potenzaDiMille\n * @param casoSpecialeUno\n * @returns\n */\nconst pronunciaPotenza = (\n  potenzaDiMille: number,\n  casoSpecialeUno = false\n): string => {\n  switch (potenzaDiMille) {\n    case 0:\n      return \"\";\n    case 1:\n      return casoSpecialeUno ? \" mille\" : \"mila \";\n    case 2:\n      return casoSpecialeUno ? \" un milione\" : \" milioni \";\n    case 3:\n      return casoSpecialeUno ? \" un miliardo\" : \" miliardi \";\n    default: {\n      // E qui richiamo la pronuncia della potenza con una ricorsione di coda\n      const parole = [\"\", pronunciaPotenza(potenzaDiMille - 3), \"miliardi\", \"\"];\n      // Se la potenza è superiore a 4 stiamo ragionando su\n      // numeri sul milione o miliardo di miliardi e quindi\n      // serve la preposizione \"di\" fra le parole\n      if (potenzaDiMille > 4) {\n        parole.splice(2, 0, \"di\");\n      }\n      return parole.join(\" \");\n    }\n  }\n};\n\n/**\n * Pronuncia numeri tra 1 e 999999999\n * @param sottogruppo\n * @param potenzaDi1000\n * @returns\n */\nconst pronunciaSottogruppo = (\n  sottogruppo: string,\n  potenzaDi1000: number\n): string => {\n  const centinaia = parseInt(sottogruppo[0]);\n  const decine = parseInt(sottogruppo[1]);\n  const unità = parseInt(sottogruppo[2]);\n  const parole: Array<string> = [];\n  // Salta la pronuncia se tutto un sottogruppo è 0\n  if (sottogruppo === \"000\") {\n    return \"\";\n  }\n  // Se il numero è una potenza di 10 >= 1000\n  // Allora è sufficiente pronunciare la potenza\n  // per il caso speciale\n  if (sottogruppo === \"001\" && potenzaDi1000 > 0) {\n    parole.push(pronunciaPotenza(potenzaDi1000, true));\n  } else {\n    parole.push(pronunciaCentinaia(centinaia));\n    // Pronuncia il 3 accentato solo se sono nel gruppo finale\n    parole.push(pronunciaDecineEdUnità(decine, unità));\n    parole.push(pronunciaPotenza(potenzaDi1000));\n  }\n  return parole.join(\"\");\n};\n\n/**\n * In Italiano la pronuncia dei numeri è raggruppata a potenze di 10^9\n * (dopo 999999999 si ripete però esplicitando la potenza di 10 del gruppo alla fine)\n * @param gruppo\n * @param potenzaDi1000\n * @returns\n */\nconst pronunciaGruppo = (\n  gruppo: Array<string>,\n  potenzaDi1000: number\n): string => {\n  // Se il gruppo completo è un 1 e non si tratta del primo allora è sufficiente\n  // pronunciare la potenza di 10 con il caso particolare 1,\n  // sapendo che per un gruppo di 3 è necessario triplicarla\n  if (gruppo.length === 1 && gruppo[0] === \"001\" && potenzaDi1000 > 0) {\n    return pronunciaPotenza(potenzaDi1000 * 3, true);\n  } else {\n    const parole: Array<string> = [];\n    // Pronuncio ogni sottogruppo e li unisco in una parola separata da spazi\n    parole.push(\n      gruppo\n        .map((sottogruppo, indice) =>\n          pronunciaSottogruppo(sottogruppo, gruppo.length - indice - 1)\n        )\n        .join(\" \")\n    );\n    // Se l'intero gruppo è fatto di zeri allora salta la pronuncia della potenza\n    if (!gruppo.every((sottogruppo) => sottogruppo === \"000\")) {\n      // Altrimenti pronuncia la potenza,\n      // sapendo che per un gruppo di 3 è necessario triplicarla\n      parole.push(pronunciaPotenza(potenzaDi1000 * 3));\n    }\n    return parole.join(\"\");\n  }\n};\n\n/**\n * Ritorna una stringa di zeri\n * @param quanti\n * @returns\n */\nconst aggiungiZeri = (quanti: number): string => Array(quanti).fill(0).join(\"\");\n\n/**\n * Mettiamo insieme i pezzi\n * @param numero\n * @returns\n */\nexport const pronunciaNumero = (numero: string | number): string => {\n  // Converto il numero in stringa (se non lo era già prima)\n  numero = numero.toString();\n  // Verifico se c'è il meno\n  const haMeno = numero[0] === \"-\";\n\n  // Tolgo il segno dal numero\n  const numeroSenzaSegno = numero.replace(\"-\", \"\");\n\n  // Se il numero è 0 allora cortocircuita e pronuncia zero (senza segno)\n  if (numeroSenzaSegno === \"0\") {\n    return \"zero\";\n  }\n\n  // Trovo di quanti sottogruppi è composto il numero\n  const quantiSottogruppi = Math.ceil(numeroSenzaSegno.length / 9);\n  // Capisco quandi zeri aggiungere al numero in modo da poterlo dividere in gruppi da 9 (e sottogruppi da 3)\n  const quantiZeriMancano = quantiSottogruppi * 9 - numeroSenzaSegno.length;\n  // Aggiungo gli zeri mancanti\n  const numeroConZeri = `${aggiungiZeri(quantiZeriMancano)}${numeroSenzaSegno}`;\n\n  // Divido il numero in sottogruppi di 3 cifre, ogni 3 sottogruppi verranno raggruppati in un gruppo\n  const gruppi = numeroConZeri\n    .match(/\\d{3}/g)\n    ?.reduce<Array<Array<string>>>((gruppi, sottogruppo, indice) => {\n      const indiceGruppo = Math.floor(indice / 3);\n      // Creo il nuovo gruppo\n      if (gruppi[indiceGruppo] == null) {\n        gruppi[indiceGruppo] = [];\n      }\n      // La condizione al contrario è meglio: se sono nel primo gruppo e non ho ancora inserito sottogruppi\n      // e il sottogruppo che sto osservando in questo momento è zero allora non lo aggiungo, altrimenti\n      // vengono pronunciati sottogruppi che non servono prima dell'inizio del numero vero e proprio\n      if (\n        indiceGruppo > 0 ||\n        gruppi[indiceGruppo].length > 0 ||\n        sottogruppo !== \"000\"\n      ) {\n        gruppi[indiceGruppo].push(sottogruppo);\n      }\n      return gruppi;\n    }, []);\n\n  // Pronuncio ogni gruppo per avere il numero totale senza segno\n  const parole =\n    gruppi?.map((gruppo, indice, gruppi) =>\n      pronunciaGruppo(gruppo, gruppi?.length - indice - 1)\n    ) ?? [];\n\n  // Aggiungo il meno se ce l'ha\n  if (haMeno) {\n    parole.unshift(\"meno\");\n  }\n\n  // Unisco tutto, rimuovo gli spazi in più\n  const numeroInParole = parole.join(\" \").trim();\n  if (numeroSenzaSegno !== \"3\" && /3$/.test(numeroSenzaSegno)) {\n    return numeroInParole.replace(/tre$/, \"tré\");\n  }\n  return numeroInParole;\n};\n\nexport const pronunciaOra = (data: Date) => {\n  const ore = data.getHours();\n  const minuti = data.getMinutes();\n  const secondi = data.getSeconds();\n  const parole: Array<string> = [];\n  parole.push(ore === 0 || ore === 1 || ore === 12 ? \"è\" : \"sono le\");\n  switch (ore) {\n    case 0:\n      parole.push(\"mezzanotte\");\n      break;\n    case 1:\n      parole.push(\"l'una\");\n      break;\n    case 12:\n      parole.push(\"mezzogiorno\");\n      break;\n    default:\n      parole.push(pronunciaNumero(ore));\n      break;\n  }\n  if (minuti > 0 && secondi > 0) {\n    parole.push(\",\");\n  } else if (minuti > 0) {\n    parole.push(\"e\");\n  }\n  switch (minuti) {\n    case 0:\n      break;\n    case 1:\n      parole.push(\"un minuto\");\n      break;\n    default:\n      parole.push(`${pronunciaNumero(minuti)} minuti`);\n      break;\n  }\n  if (secondi > 0) {\n    parole.push(\"e\");\n  }\n  switch (secondi) {\n    case 0:\n      break;\n    case 1:\n      parole.push(\"un secondo\");\n      break;\n    default:\n      parole.push(`${pronunciaNumero(secondi)} secondi`);\n      break;\n  }\n\n  return parole.join(\" \").replace(\" ,\", \",\");\n};\n\nconst pronunciaGiorno = (giorno: number): string => {\n  switch (giorno) {\n    case 0:\n      return \"Domenica\";\n    case 1:\n      return \"Lunedì\";\n    case 2:\n      return \"Martedì\";\n    case 3:\n      return \"Mercoledì\";\n    case 4:\n      return \"Giovedì\";\n    case 5:\n      return \"Venerdì\";\n    case 6:\n      return \"Sabato\";\n    default:\n      return \"\";\n  }\n};\n\nconst pronunciaMese = (mese: number): string => {\n  switch (mese) {\n    case 0:\n      return \"Gennaio\";\n    case 1:\n      return \"Febbraio\";\n    case 2:\n      return \"Marzo\";\n    case 3:\n      return \"Aprile\";\n    case 4:\n      return \"Maggio\";\n    case 5:\n      return \"Giugno\";\n    case 6:\n      return \"Luglio\";\n    case 7:\n      return \"Agosto\";\n    case 8:\n      return \"Settembre\";\n    case 9:\n      return \"Ottobre\";\n    case 10:\n      return \"Novembre\";\n    case 11:\n      return \"Dicembre\";\n    default:\n      return \"\";\n  }\n};\n\nexport const pronunciaData = (date: Date): string => {\n  const parole: Array<string> = [\n    \"oggi è\",\n    pronunciaGiorno(date.getDay()),\n    pronunciaNumero(date.getDate()),\n    pronunciaMese(date.getMonth()),\n    pronunciaNumero(date.getFullYear()).replace(/\\s+/, ''),\n  ];\n  return parole.join(\" \");\n};\n\nexport const pronunciaDataOra = (date: Date): string => {\n  const parole: Array<string> = [pronunciaData(date), pronunciaOra(date)];\n  const oraCorrente = date.getHours();\n  parole.splice(1, 0, `e${oraCorrente < 2 || oraCorrente === 12 ? \"d\" : \"\"}`);\n  return parole.join(\" \");\n};\n"],"names":["pronunciaNumeroACaso","inNumero","length","randomLength","Math","floor","random","randomNumber","randomDigit","getRandomNumber","aParole","pronunciaNumero","useState","numeroCasuale","impostaNumeroCasuale","onClick","pronunciaUnità","unità","aggiungiUltimaVocale","vocale","pronunciaPotenza","potenzaDiMille","casoSpecialeUno","parole","splice","join","pronunciaSottogruppo","sottogruppo","potenzaDi1000","centinaia","parseInt","decine","push","pronunciaCentinaia","pronunciaDecineEdUnità","numero","haMeno","toString","numeroSenzaSegno","replace","quanti","quantiZeriMancano","ceil","gruppi","Array","fill","match","reduce","indice","indiceGruppo","map","gruppo","every","pronunciaGruppo","unshift","numeroInParole","trim","test","pronunciaOra","data","ore","getHours","minuti","getMinutes","secondi","getSeconds","pronunciaGiorno","giorno","pronunciaMese","mese","pronunciaData","date","getDay","getDate","getMonth","getFullYear","pronunciaDataOra","oraCorrente"],"sourceRoot":""}